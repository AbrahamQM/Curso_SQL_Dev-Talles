//basado en la web medium: https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e


//primera tabla (sesión 6 Tabla de "users")
table users{
  user_id integer [pk, increment]
  username varchar(30) [not null, unique]
  email varchar(30) [not null, unique]
  password varchar [not null]
  name varchar [not null]
  role varchar(10) [not null]
  gender varchar(10) [not null]
  avatar varchar
  
  created_at timestamp [default: 'now()']


}

//segunda tabla (sesión 7 Tabla de "posts")
table posts {
  post_id integer [pk, increment]
  title varchar(100) [default: '']
  body text [default: '']
  //imagen principal del post
  og_image varchar //Open Graph ver https://ogp.me/
  //url fácil de leer 
  slug varchar [not null, unique] //ver https://www.maestrosdelweb.com/urlamigable/

  published boolean [not null, default: false]
  //comprobar si el false va entre '' o no

  //Id del usuario creador
  //arrastrando desde user_id a created_by se crea la
  //línea Ref: "users"."user_id" < "posts"."created_by"
  // que está justo después de esta definición de tabla
  created_by integer
  //para saber la fecha creacion del post
  created_at timestamp [default: 'now()']
}

Ref: "users"."user_id" < "posts"."created_by"

//tercera tabla (sesión 8 Tabla de "claps")
table claps {
  clap_id integer [pk, increment]
  post_id integer
  user_id integer
  counter integer  [default: 0]

  created_at timestamp [default: 'now()']
  
  indexes {
    //Indice que nos hará mas rápido averiguar si 
    //ya hemos hecho clap en este post
    (post_id, user_id) [unique] 
    //Indice que nos hará mas rápido el recuento 
    //de claps por post 
    //no es unique poque hay muchos claps al mismo
    //post
    post_id 
  }
}

Ref: "claps"."clap_id" > "posts"."post_id"

Ref: "users"."user_id" < "claps"."user_id"

Table comments{
    comment_id integer [pk, increment]
    post_id integer
    user_id integer 
    content text
    created_at timestamp [default: 'now()']
    visible boolean
    
    comment_parent_id integer

    indexes {
      //para cargar todos los comentarios de un post
      post_id
      //para hacer mas rápido cargar solo los post 
      //que no están ocultos
      visible
    }
}



Ref: "posts"."post_id" < "comments"."comment_id"

Ref: "users"."user_id" < "comments"."user_id"

Ref: "comments"."comment_id" < "comments"."comment_parent_id"





//tabla para listas de post guardados por
//un usuario
Table users_lists{
  user_list_id integer [pk, increment]
  user_id integer
  title varchar(100)
  
  indexes {
    //una persona solo puede tener cada lista una vez
    (user_id, title) [unique]
    //para agilizar obtener las listas que
    //tiene un usuario (para cuando el usuario
    //quiere guardar el post en una de sus listas)
    user_id
  }
}


//Tabla para los post guardados de un usuario
//Relacionándola con la lista en la que lo guardó
Table user_list_entry{
  user_list_entry_id integer [pk, increment]
  user_list_id integer
  post_id integer

}


Ref: "users"."user_id" < "users_lists"."user_id"

Ref: "users_lists"."user_list_id" < "user_list_entry"."user_list_id"

Ref: "posts"."post_id" < "user_list_entry"."post_id"

/******************************************************
DESPUÉS DE DISEÑAR LA BBDD, LA EXPORTAMOS PARA 
POSTGRES.
SE DESCARGA EL FICHERO CON EL NOMBRE DE LA BBDD
QUE HE INCLUIDO EN ESTA CARPETA
*******************************************************/